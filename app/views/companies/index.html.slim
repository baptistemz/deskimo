= content_for(:meta_title){"deskimo - Bureaux à louer pour courte durée."}
- if params[:city]
  = content_for(:meta_description){"Reservez un bureau dans une entreprise à #{params[:city]}."}
-else
  = content_for(:meta_description){"Reservez un bureau dans une entreprises autour de vous."}
#desktop-map.hidden-xs
#mobile-map.visible-xs.out-window
.container-fluid#main
  .row
    .col-xs-12.col-sm-7
      .row.research-bar
        .col-xs-9.col-sm-12
          = form_tag companies_path, method: :get, class: "flexform"
            .row
              .col-xs-7
                = text_field_tag :full_address, params[:full_address], placeholder: t('home.city_placeholder'), id: "js-autocomplete-city", class: "pretty-field index-search-field"
                button.search-btn#index-search-btn type="submit"
                  i.fa.fa-search
                = hidden_field_tag :lat, params[:lat], id: "lat"
                = hidden_field_tag :lng, params[:lng], id: "lng"

              .col-xs-5
                #filter-select
                  = select_tag :kind, options_for_select(Desk.kind.options(only: @kinds), params[:kind]), label: false, prompt: t('index.kind_of_desk'), include_blank: false, :onchange => "this.form.submit()"


        .col-xs-3.visible-xs.no-padding-left
          .map-btn
            = image_tag 'map-icon.png', id: 'map-icon'
            .i.fa.fa-list#list-icon.hidden

      .row
        - if @empty_message
          p.text-center = @empty_message
        -else
          #companies
            - @companies.each do |company|
              .col-xs-12.col-md-6
                - if params[:kind] == "closed_office"
                  =link_to company_desks_path(company, :tab_selected => "closed_office")
                    = render partial: 'company_thumbnail', locals: {company: company}
                - elsif params[:kind] == "meeting_room"
                  =link_to company_desks_path(company, :tab_selected => "meeting_room")
                    = render partial: 'company_thumbnail', locals: {company: company}
                -else
                  =link_to company_desks_path(company)
                    = render partial: 'company_thumbnail', locals: {company: company}
      - if @companies.total_pages > 1
        .pagination
          .counter #{@companies.current_page}/#{@companies.total_pages}
          = link_to params.merge({page: @companies.previous_page})
            .paginate.left
              i
              i
          = link_to params.merge({page: @companies.next_page})
            .paginate.right
              i
              i

    .col-sm-5.hidden-xs.fixed





  - content_for (:after_js)


    javascript:
      $(function(){
        var mapStyle = [{"featureType":"administrative","elementType":"labels.text.fill","stylers":[{"color":"#781611"}]},{"featureType":"landscape","elementType":"all","stylers":[{"color":"#f2f2f2"}]},{"featureType":"landscape.man_made","elementType":"geometry.fill","stylers":[{"visibility":"on"},{"color":"#dfdfdf"}]},{"featureType":"poi","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"road","elementType":"all","stylers":[{"saturation":-100},{"lightness":45}]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[{"gamma":"0.86"},{"visibility":"on"},{"color":"#e2b119"}]},{"featureType":"transit","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"transit.station.rail","elementType":"geometry.fill","stylers":[{"visibility":"on"},{"hue":"#ff7100"}]},{"featureType":"water","elementType":"geometry","stylers":[{"visibility":"on"},{"color":"#4980c1"}]}];
        handler = Gmaps.build('Google');
        handler.buildMap({
          internal: { id: 'desktop-map' },
          provider: {
            styles: mapStyle,
            scrollwheel: false
          }
        }, function(){
          markers1 = handler.addMarkers(#{raw @hash.to_json});
          markers2 = handler.addMarkers(#{raw @mypos.to_json});
          allmarkers = $.merge( $.merge( [], markers1 ), markers2 )
          if(markers1.length === 0){
            handler.map.serviceObject.setZoom(14);
            handler.map.centerOn(markers2[0]);
          } else {
            handler.bounds.extendWith(allmarkers);
            handler.fitMapToBounds();
          }

        });

        mobile_handler = Gmaps.build('Google');
        mobile_handler.buildMap({
          internal: { id: 'mobile-map' },
          provider: {
            styles: mapStyle,
            scrollwheel: true
          }
        }, function(){
          markers1 = mobile_handler.addMarkers(#{raw @hash.to_json});
          markers2 = mobile_handler.addMarkers(#{raw @mypos.to_json});
          allmarkers = $.merge( $.merge( [], markers1 ), markers2 )
          if(markers1.length === 0){
            mobile_handler.map.serviceObject.setZoom(14);
            mobile_handler.map.centerOn(markers2[0])
          } else {
            mobile_handler.bounds.extendWith(allmarkers);
            mobile_handler.fitMapToBounds();
          }
        });
      })
/ = react_component "CompaniesList", render(template: 'companies/index.json.jbuilder')
= javascript_include_tag "https://google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js"

